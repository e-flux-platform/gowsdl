// Code generated by gowsdl DO NOT EDIT.

package ochp

import (
	"context"
	"encoding/xml"
	"github.com/e-flux-platform/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

// start: typesTmpl

// Elements

type CdrId string

//
// The EVSE-ID is uniquely referencing one charge point.
//

type EvseId string

//
// The Contract-ID or EVCO-ID is uniquely referencing one customer account of a service provider.
//

type ContractId string

//
// The Parking-ID uniquely references one parking spot.
//

type ParkingId string

//
// The Tariff-ID uniquely references one tariff.
//

type TariffId string

type DateTimeType struct {

	//
	// Format is according to ISO8601 UTC. The field takes 20 alphanumeric characters.
	//

	// HERE3
	DateTime string `xml:"ns:DateTime,omitempty" json:"DateTime,omitempty"`
}

type LocalDateTimeType struct {

	// HERE3
	LocalDateTime string `xml:"ns:LocalDateTime,omitempty" json:"LocalDateTime,omitempty"`
}

type EmtId struct {

	//
	// The authorization tokens are defined according to the specification of the EMT-ID (Token ID). Each token consists of an token instance which holds the payload and at least the token type. The sub-type is for further specification of the general token type.
	//

	// HERE3
	Instance string `xml:"ns:instance,omitempty" json:"instance,omitempty"`

	//
	// The type of the supplied instance for basic filtering.
	//

	// HERE3
	TokenType string `xml:"ns:tokenType,omitempty" json:"tokenType,omitempty"`

	//
	// The exact type of the supplied instance for referencing purpose.
	//

	// HERE3
	TokenSubType string `xml:"ns:tokenSubType,omitempty" json:"tokenSubType,omitempty"`

	//
	// Specifies the representation of the token to allow hashed token values.
	// plain:   The token instance is represented in plain text;
	// sha-160: The token instance is represented in its 160bit SHA1 hash in 40 hexadecimal digits;
	// sha-256: The token instance is represented in its 256bit SHA2 hash in 64 hexadecimal digits;
	//

	Representation string `xml:"http://ochp.eu/1.4 representation,attr,omitempty" json:"representation,omitempty"`
}

type CdrStatusType struct {

	//
	// new; A new CDR before upload to the CHS
	// accepted; An uploaded CDR was accepted by the CHS as plausible
	// rejected; The checked CDR again rejected by the CHS and is to be archived.
	// owner declined; The CDR was declined by the owner (EVSP)
	// approved; The CDR was approved by the owner(EVSP)
	// revised; The CDR was revised by the CPO after a rejection by the owner.
	//

	// HERE3
	CdrStatusType string `xml:"ns:CdrStatusType,omitempty" json:"CdrStatusType,omitempty"`
}

type ConnectorType struct {

	//
	// The Standard of the installed connector;
	// Chademo                The connector type is CHAdeMO, DC
	// IEC_62196_T1           The connector type is IEC 62196 Type 1 “SAE J1772”
	// IEC_62196_T1_COMBO     The connector type is Combo Type 1 based, DC
	// IEC_62196_T2           The connector type is IEC 62196 Type 2 “Mennekes”
	// IEC_62196_T2_COMBO     The connector type is Combo Type 2 based, DC
	// IEC_62196_T3A          The connector type is IEC 62196 Type 3A
	// IEC_62196_T3C          The connector type is IEC 62196 Type 3C “Scame”
	// DOMESTIC_A             The connector type is Standard/Domestic household, type "A", NEMA 1-15, 2 pins
	// DOMESTIC_B             The connector type is Standard/Domestic household, type "B", NEMA 5-15, 3 pins
	// DOMESTIC_C             The connector type is Standard/Domestic household, type "C", CEE 7/17, 2 pins
	// DOMESTIC_D             The connector type is Standard/Domestic household, type "D", 3 pin
	// DOMESTIC_E             The connector type is Standard/Domestic household, type "E", CEE 7/5 3 pins
	// DOMESTIC_F             The connector type is Standard/Domestic household, type "F", CEE 7/4, Schuko, 3 pins
	// DOMESTIC_G             The connector type is Standard/Domestic household, type "G", BS 1363, Commonwealth, 3 pins
	// DOMESTIC_H             The connector type is Standard/Domestic household, type "H", SI-32, 3 pins
	// DOMESTIC_I             The connector type is Standard/Domestic household, type "I", AS 3112, 3 pins
	// DOMESTIC_J             The connector type is Standard/Domestic household, type "J", SEV 1011, 3 pins
	// DOMESTIC_K             The connector type is Standard/Domestic household, type "K", DS 60884-2-D1, 3 pins
	// DOMESTIC_L             The connector type is Standard/Domestic household, type "L", CEI 23-16-VII, 3 pins
	// TESLA_R                The connector type is Tesla Connector “Roadster”-type (round, 4 pin)
	// TESLA_S                The connector type is Tesla Connector “Model_S”-type (oval, 5 pin)
	// IEC_60309_2_single_16  The connector type is IEC 60309-2 Industrial Connector single phase 16 Amperes (usually blue)
	// IEC_60309_2_three_16   The connector type is IEC 60309-2 Industrial Connector three phase 16 Amperes (usually red)
	// IEC_60309_2_three_32   The connector type is IEC 60309-2 Industrial Connector three phase 32 Amperes (usually red)
	// IEC_60309_2_three_64   The connector type is IEC 60309-2 Industrial Connector three phase 64 Amperes (usually red)
	//
	// HERE5
	ConnectorStandard *ConnectorStandard `xml:"ns:connectorStandard,omitempty" json:"connectorStandard,omitempty"`

	//
	// The format (socket/ cable) of the installed connector Socket The connector is a socket; the EV user needs to bring a fitting plug. Cable The connector is an attached cable; the EV user car needs to have a fitting inlet.
	//
	// HERE5
	ConnectorFormat *ConnectorFormat `xml:"ns:connectorFormat,omitempty" json:"connectorFormat,omitempty"`

	//
	// References a tariff uploaded by the CPO to be used with this connector.
	//
	// HERE5
	TariffId *TariffId `xml:"ns:tariffId,omitempty" json:"tariffId,omitempty"`
}

type RatingsType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 ratings"`

	//
	// The maximum available power at this charge point at nominal voltage over all available phases of the line.
	//
	// HERE5
	MaximumPower float32 `xml:"ns:maximumPower,omitempty" json:"maximumPower,omitempty"`

	//
	// The minimum guaranteed mean power in case of load management. Should be set to maximum when no load management applied.
	//
	// HERE5
	GuaranteedPower float32 `xml:"ns:guaranteedPower,omitempty" json:"guaranteedPower,omitempty"`

	//
	// The nominal voltage for the charge point.
	//

	// HERE3
	NominalVoltage int32 `xml:"ns:nominalVoltage,omitempty" json:"nominalVoltage,omitempty"`
}

type ParkingSpotInfo struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 parkingSpot"`

	//
	// Globally unique identifier for this parking spot.
	//
	// HERE5
	ParkingId *ParkingId `xml:"ns:parkingId,omitempty" json:"parkingId,omitempty"`

	//
	// Restrictions to the usage of this parking spot.
	//
	// HERE5
	Restriction []*RestrictionType `xml:"ns:restriction,omitempty" json:"restriction,omitempty"`

	//
	// Alphanumeric. Level on which the charge station is located (in garage buildings) in the locally displayed numbering scheme. Examples: "-2","P-5", "2", "+5"
	//

	// HERE3
	FloorLevel string `xml:"ns:floorLevel,omitempty" json:"floorLevel,omitempty"`

	//
	// Alphanumeric. Locally displayed parking slot number. Examples: "10", "251","B25", "P-234"
	//

	// HERE3
	ParkingSpotNumber string `xml:"ns:parkingSpotNumber,omitempty" json:"parkingSpotNumber,omitempty"`
}

type CdrPeriodType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 chargingPeriods"`

	//
	// Starting time of period. Must be equal or later than startDateTime of the CDRInfo
	//
	// HERE5
	StartDateTime *LocalDateTimeType `xml:"ns:startDateTime,omitempty" json:"startDateTime,omitempty"`

	//
	// Ending time of the period. Must be equal or earlier than endDateTime of the CDRInfo
	//
	// HERE5
	EndDateTime *LocalDateTimeType `xml:"ns:endDateTime,omitempty" json:"endDateTime,omitempty"`

	//
	// Defines what the EVSP is charged for during this period
	//
	// HERE5
	BillingItem *BillingItemType `xml:"ns:billingItem,omitempty" json:"billingItem,omitempty"`

	//
	// The value the EVSP is charged for. The unit of the value depends on the billingItem.
	//
	// HERE5
	BillingValue float32 `xml:"ns:billingValue,omitempty" json:"billingValue,omitempty"`

	//
	// Price per unit of the billingItem in the given currency.
	//
	// HERE5
	ItemPrice float32 `xml:"ns:itemPrice,omitempty" json:"itemPrice,omitempty"`

	//
	// The cost of the period in the given currency.
	//
	// HERE5
	PeriodCost float32 `xml:"ns:periodCost,omitempty" json:"periodCost,omitempty"`

	//
	// Tax rate in percent that is to be paid for charging processes in the country of origin.
	//
	// HERE5
	Taxrate int32 `xml:"ns:taxrate,omitempty" json:"taxrate,omitempty"`
}

type BillingItemType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 billingItem"`

	// HERE3
	BillingItemType string `xml:"ns:BillingItemType,omitempty" json:"BillingItemType,omitempty"`
}

type GeoPointType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 chargePointLocation"`

	//
	// Latitude of the Point in decimal degree. Example: 50.104965 Decimal separator: "." Regex: -?[0-9]{1,2}\.[0-9]{6}
	//

	Lat string `xml:"http://ochp.eu/1.4 lat,attr,omitempty" json:"lat,omitempty"`

	//
	// Longitude of the decimal degree Example: -126.104965 Decimal separator: "." Regex: -?[0-9]{1,3}\.[0-9]{6}
	//

	Lon string `xml:"http://ochp.eu/1.4 lon,attr,omitempty" json:"lon,omitempty"`
}

type AdditionalGeoPointType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 relatedLocation"`

	*GeoPointType

	//
	// Name of the point in local language or as written at the location. For example the street name of a parking lot entrance or it's number.
	//

	Name string `xml:"http://ochp.eu/1.4 name,attr,omitempty" json:"name,omitempty"`

	//
	// The class of this geo point  for categorization and right usage.
	// * entrance: For larger sites entrances may be specified for navigation.
	// * exit: For larger sites exits may be specified for navigation purpose.
	// * access: Two directional entrance and exit.
	// * ui: Geographical location of the user interface for authorisation and payment means. If not specified the user interface is assumed to be at the location of the charge point.
	// * other: Other relevant point. Name recommended.
	//

	Type string `xml:"http://ochp.eu/1.4 type,attr,omitempty" json:"type,omitempty"`
}

type ConnectorStandard struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 connectorStandard"`

	// HERE3
	ConnectorStandard string `xml:"ns:ConnectorStandard,omitempty" json:"ConnectorStandard,omitempty"`
}

type HoursType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 openingTimes"`

	//
	// Exceptions for specific calendar dates, time-range based. Periods the station is operating/accessible. Additional to regular hours. May overlap regular rules.
	//
	// HERE5
	ExceptionalOpenings []*ExceptionalPeriodType `xml:"ns:exceptionalOpenings,omitempty" json:"exceptionalOpenings,omitempty"`

	//
	// Exceptions for specific calendar dates, time-range based. Periods the station is not operating/accessible. Additional to regular hours. Overwriting regularHours and twentyfourseven. Should not overlap exceptionalOpenings.
	//
	// HERE5
	ExceptionalClosings []*ExceptionalPeriodType `xml:"ns:exceptionalClosings,omitempty" json:"exceptionalClosings,omitempty"`

	//
	// Should be set to true in case an EV can be charged when plugged in during off-times (i.e. when the location is closed according to the specified hours).
	//
	// HERE5
	ClosedCharging bool `xml:"ns:closedCharging,omitempty" json:"closedCharging,omitempty"`

	//
	// Regular hours, weekday based. This element should not be set for representing 24/7.
	//
	// HERE5
	RegularHours *RegularHoursType `xml:"ns:regularHours,omitempty" json:"regularHours,omitempty"`

	//
	// True to represent 24 hours per day and 7 days per week, except the given exceptions.
	//
	// HERE5
	Twentyfourseven bool `xml:"ns:twentyfourseven,omitempty" json:"twentyfourseven,omitempty"`
}

type ChargePointStatusType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 status"`

	//
	// Unknown; No status information available
	// Operative; Charge point is in operation and can be used
	// Inoperative; charge point cannot be used due to maintenance, greater downtime, blocking construction works or other access restrictions (temporarily, will be operative in the future).
	// Planned; planned charge point, will be operating soon
	// Closed; discontinued charge point, will be deleted soon
	//

	// HERE3
	ChargePointStatusType string `xml:"ns:ChargePointStatusType,omitempty" json:"ChargePointStatusType,omitempty"`
}

type ChargePointScheduleType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 statusSchedule"`

	//
	// Begin of scheduled period.
	//
	// HERE5
	StartDate *DateTimeType `xml:"ns:startDate,omitempty" json:"startDate,omitempty"`

	//
	// End of scheduled period, if known.
	//
	// HERE5
	EndDate *DateTimeType `xml:"ns:endDate,omitempty" json:"endDate,omitempty"`

	//
	// Status value during the scheduled period.
	//
	// HERE5
	Status *ChargePointStatusType `xml:"ns:status,omitempty" json:"status,omitempty"`
}

type GeneralLocationType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 location"`

	//
	// * on-street parking in public space
	// * parking-garage multistorey car park
	// * underground-garage multistorey car park, mainly underground
	// * parking-lot a cleared area that is intended for parking vehicles, i.e. at super markets, bars, etc.
	// * other none of the given possibilities
	// * unknown parking location type is not known by the operator
	// * private located in private or corporate grounds, may not be accessible to the public
	//

	// HERE3
	GeneralLocationType string `xml:"ns:GeneralLocationType,omitempty" json:"GeneralLocationType,omitempty"`
}

type RestrictionType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 restriction"`

	//
	// * evonly reserved parking spot for electric vehicles
	// * plugged parking allowed only while plugged in (and charging)
	// * disabled reserved parking spot for disabled people with valid ID
	// * customers parking or charging for costumer/guests only, for example in case of a hotel or shop
	// * motorcycles parking spot only suitable for (electric) motorcycles, scooters or bicycles
	// * carsharing charging / parking only for carsharing vehicles
	//

	// HERE3
	RestrictionType string `xml:"ns:RestrictionType,omitempty" json:"RestrictionType,omitempty"`
}

type AuthMethodType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 authMethods"`

	// HERE3
	AuthMethodType string `xml:"ns:AuthMethodType,omitempty" json:"AuthMethodType,omitempty"`
}

type RegularHoursType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 regularHours"`

	//
	// Number of day in the week, beginning with Monday(1) until Sunday (7).
	//

	Weekday int32 `xml:"http://ochp.eu/1.4 weekday,attr,omitempty" json:"weekday,omitempty"`

	//
	// Begin of the regular period given in hours and minutes. Must be in 24h format with leading zeros. Example 18:15 Minute/Hour separator is :
	//

	PeriodBegin string `xml:"http://ochp.eu/1.4 periodBegin,attr,omitempty" json:"periodBegin,omitempty"`

	//
	// End of the regular period, syntax as for periodBegin. Must be later than periodBegin.
	//

	PeriodEnd string `xml:"http://ochp.eu/1.4 periodEnd,attr,omitempty" json:"periodEnd,omitempty"`
}

type ExceptionalPeriodType struct {

	//
	// Begin of exception
	//
	// HERE5
	PeriodBegin *DateTimeType `xml:"ns:periodBegin,omitempty" json:"periodBegin,omitempty"`

	//
	// End of exception
	//
	// HERE5
	PeriodEnd *DateTimeType `xml:"ns:periodEnd,omitempty" json:"periodEnd,omitempty"`
}

type ConnectorFormat struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 connectorFormat"`

	//
	// The format (socket/ cable) of the installed connector.
	// Socket; The connector is a socket; the EV user needs to bring a fitting plug
	// Cable; The connector is an attached cable; the EV user car needs to have a fitting inlet
	//

	// HERE3
	ConnectorFormat string `xml:"ns:ConnectorFormat,omitempty" json:"ConnectorFormat,omitempty"`
}

type ResultCodeType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 resultCode"`

	//
	// ok: Data accepted and processed;
	// partly: Only part of the data was accepted;
	// not-authorized: Wrong username and/or password;
	// invalid-id: One or more ID (EVSE/Contract) were not valid for this user;
	// server: Internal server error;
	// format: Data has technical errors;
	// roaming: No roaming connections set; No own partners connected to this user; Roaming partners have no data;
	//

	// HERE3
	ResultCode string `xml:"ns:resultCode,omitempty" json:"resultCode,omitempty"`
}

type AddressType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 chargePointAddress"`

	//
	// Alphanumeric, for example "10", "255B".
	//

	// HERE3
	HouseNumber string `xml:"ns:houseNumber,omitempty" json:"houseNumber,omitempty"`

	//
	// Alphanumeric; for example "Av. Saint-Jean". Optionally also containing the house number if not in field houseNumber.
	//

	// HERE3
	Address string `xml:"ns:address,omitempty" json:"address,omitempty"`

	//
	// Alphabetic, in the language defined in locationNameLang
	//

	// HERE3
	City string `xml:"ns:city,omitempty" json:"city,omitempty"`

	//
	// Alphanumeric, examples: "60439", "8011 PK". Without leading country code.
	//

	// HERE3
	ZipCode string `xml:"ns:zipCode,omitempty" json:"zipCode,omitempty"`

	//
	// Alpha, three characters. Iso 3166 country code
	//

	// HERE3
	Country string `xml:"ns:country,omitempty" json:"country,omitempty"`
}

type EvseImageUrlType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 images"`

	//
	// uri from where the image data can be fetched. Must begin with a protocol of the list: http, https, file, ftp
	//

	// HERE3
	Uri string `xml:"ns:uri,omitempty" json:"uri,omitempty"`

	//
	// uri from where a thumbnail of the image can be fetched. Must begin with a protocol of the list: http, https, file, ftp
	//

	// HERE3
	ThumbUri string `xml:"ns:thumbUri,omitempty" json:"thumbUri,omitempty"`

	//
	// Image class for usage categorization. Values:
	// networkLogo: logo of a associated roaming network to be displayed with the EVSE for example in lists, maps and detailed information view;
	// operatorLogo: logo of the charge points operator, for example a municipal, to be displayed with the EVSEs detailed information view or in lists and maps, if no networkLogo is present;
	// ownerLogo: logo of the charge points owner, for example a local store, to be displayed with the EVSEs detailed information view;
	// stationPhoto: full view photo of the station in field. Should show the station only;
	// locationPhoto: location overview photo. Should indicate the location of the station on the site or street.;
	// entrancePhoto: location entrance photo. Should show the car entrance to the location from street side;
	// otherPhoto: other related photo to be displayed with the stations detailed information view;
	// otherLogo: other related logo to be displayed with the stations detailed information view;
	// otherGraphic: other related graphic to be displayed with the stations detailed information view;
	//

	// HERE3
	Class string `xml:"ns:class,omitempty" json:"class,omitempty"`

	//
	// Image type like: gif, jpeg, png, svg
	//

	// HERE3
	Type string `xml:"ns:type,omitempty" json:"type,omitempty"`

	//
	// Width of the full scale image
	//

	// HERE3
	Width int32 `xml:"ns:width,omitempty" json:"width,omitempty"`

	//
	// Height of the full scale image
	//

	// HERE3
	Height int32 `xml:"ns:height,omitempty" json:"height,omitempty"`
}

type RelatedResourceType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 relatedResource"`

	//
	// Referencing uri to the resource. Must begin with a protocol of the list: http, https.
	//

	// HERE3
	Uri string `xml:"ns:uri,omitempty" json:"uri,omitempty"`

	//
	// The class of referenced related resource. Values:
	// operatorMap: direct link to this charge point on a map of the operator
	// operatorPayment: link to a payment page of the operator for contractless direct payment
	// stationInfo: further information on the charging station
	// surroundingInfo: further information on the surroundings of the charging station e.g. further POIs
	// ownerHomepage: website of the station owner (not operator) in case of hotels, restaurants, etc.
	// feedbackForm: form for user feedback on the charging station service
	//

	// HERE3
	Class string `xml:"ns:class,omitempty" json:"class,omitempty"`
}

type IndividualTariffType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 individualTariff"`

	//
	// Contains information about the pricing structure of the tariff element.
	//
	// HERE5
	TariffElement []*TariffElementType `xml:"ns:tariffElement,omitempty" json:"tariffElement,omitempty"`

	//
	// Alphanumeric. Identifies a recipient EMSP according to EMSP-ID without separators. If not provided, tariff element is considered the default tariff for this tariffId. Should never be returned by the CHS (i.e. only part of upload, not download).
	//

	// HERE3
	Recipient string `xml:"ns:recipient,omitempty" json:"recipient,omitempty"`

	//
	// Alphabetic. The displayed and charged currency. Defined in ISO 4217 - Table A.1, alphabetic list.
	//

	// HERE3
	Currency string `xml:"ns:currency,omitempty" json:"currency,omitempty"`
}

type TariffElementType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 tariffElement"`

	//
	// Contains information about the pricing structure of the tariff element.
	//
	// HERE5
	PriceComponent *PriceComponentType `xml:"ns:priceComponent,omitempty" json:"priceComponent,omitempty"`

	//
	// Contains information about when to apply the defined priceComponent / tariffElement.
	//
	// HERE5
	TariffRestriction *TariffRestrictionType `xml:"ns:tariffRestriction,omitempty" json:"tariffRestriction,omitempty"`
}

type PriceComponentType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 priceComponent"`

	//
	// What dimension is part of this tariff element.
	//
	// HERE5
	BillingItem *BillingItemType `xml:"ns:billingItem,omitempty" json:"billingItem,omitempty"`

	//
	// Price per unit of the billingItem in the given currency.
	//
	// HERE5
	ItemPrice float32 `xml:"ns:itemPrice,omitempty" json:"itemPrice,omitempty"`

	//
	// Minimum amount to be billed. This unit will be billed in this stepSize blocks. For example: if billingItem is usagetime and stepSize is 0.1, then time will be billed in blocks of 6 minutes, so if 8 minutes is used, 12 minutes (2 blocks of stepSize) will be billed. In case of one-time payments, this is to be set to 1.0.
	//
	// HERE5
	StepSize float32 `xml:"ns:stepSize,omitempty" json:"stepSize,omitempty"`
}

type TariffRestrictionType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 tariffRestriction"`

	//
	// Regular hours, weekday based. No more than two periods per weekday.
	//
	// HERE5
	RegularHours *RegularHoursType `xml:"ns:regularHours,omitempty" json:"regularHours,omitempty"`

	//
	// Valid from this date/time.
	//
	// HERE5
	StartDateTime *DateTimeType `xml:"ns:startDateTime,omitempty" json:"startDateTime,omitempty"`

	//
	// Valid until this date/time.
	//
	// HERE5
	EndDateTime *DateTimeType `xml:"ns:endDateTime,omitempty" json:"endDateTime,omitempty"`

	//
	// Minimum energy used in kWh. Valid from this amount used.
	//
	// HERE5
	MinEnergy float32 `xml:"ns:minEnergy,omitempty" json:"minEnergy,omitempty"`

	//
	// Maximum energy used in kWh. Valid up to this amount used.
	//
	// HERE5
	MaxEnergy float32 `xml:"ns:maxEnergy,omitempty" json:"maxEnergy,omitempty"`

	//
	// Minimum power in kW. Valid from this power.
	//
	// HERE5
	MinPower float32 `xml:"ns:minPower,omitempty" json:"minPower,omitempty"`

	//
	// Maximum power in kW. Valid up to this power.
	//
	// HERE5
	MaxPower float32 `xml:"ns:maxPower,omitempty" json:"maxPower,omitempty"`

	//
	// Minimum duration in seconds. Valid from this duration.
	//
	// HERE5
	MinDuration int32 `xml:"ns:minDuration,omitempty" json:"minDuration,omitempty"`

	//
	// Maximum duration in seconds. Valid up to this duration.
	//
	// HERE5
	MaxDuration int32 `xml:"ns:maxDuration,omitempty" json:"maxDuration,omitempty"`
}

type RoamingAuthorisationInfo struct {

	//
	// Electrical vehicle contract identifier.
	//
	// HERE5
	EmtId *EmtId `xml:"ns:EmtId,omitempty" json:"EmtId,omitempty"`

	//
	// EMA-ID the token belongs to.
	//
	// HERE5
	ContractId *ContractId `xml:"ns:contractId,omitempty" json:"contractId,omitempty"`

	//
	// Might be used for manual authorisation.
	//

	// HERE3
	PrintedNumber string `xml:"ns:printedNumber,omitempty" json:"printedNumber,omitempty"`

	//
	// Tokens may be used until the date of expiry is reached. To be handled by the partners systems. Expired roaming authorisations may be erased locally by each partner's system.
	//
	// HERE5
	ExpiryDate *DateTimeType `xml:"ns:expiryDate,omitempty" json:"expiryDate,omitempty"`
}

type CDRInfo struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 cdrInfoArray"`

	//
	// Alphanumeric, Charge Data Record number. Unique per EVSE-ID.
	//
	// HERE5
	CdrId *CdrId `xml:"ns:CdrId,omitempty" json:"CdrId,omitempty"`

	//
	// Unique identifier for every EVSE following a common scheme with a major id-unit reflecting the country and the market partner issuing it.
	//
	// HERE5
	EvseId *EvseId `xml:"ns:evseId,omitempty" json:"evseId,omitempty"`

	//
	// Utilized token for this charging session.
	//
	// HERE5
	EmtId *EmtId `xml:"ns:emtId,omitempty" json:"emtId,omitempty"`

	//
	// Identifies a customer in the electric mobility charging context.
	//
	// HERE5
	ContractId *ContractId `xml:"ns:contractId,omitempty" json:"contractId,omitempty"`

	//
	// Current status of the CDR. Must be set to "new" or "revised" by the issuing CMS. Shall not be changed by any partner but only by the CHS. "Revised" status is only possible for CDRs that have either status "accepted" or "declined".
	//
	// HERE5
	Status *CdrStatusType `xml:"ns:status,omitempty" json:"status,omitempty"`

	//
	// Start date and time of charge session
	// (login with the RFID badge). Local time
	// of the charge point is used.
	//
	// HERE5
	StartDateTime *LocalDateTimeType `xml:"ns:startDateTime,omitempty" json:"startDateTime,omitempty"`

	//
	// End date and time of the charge session (log-off with the RFID badge or physical disconnect). Must be set in the local time of the charge point.
	//
	// HERE5
	EndDateTime *LocalDateTimeType `xml:"ns:endDateTime,omitempty" json:"endDateTime,omitempty"`

	//
	// Duration of the charge session. Example "000:18:00"
	//

	// HERE3
	Duration string `xml:"ns:duration,omitempty" json:"duration,omitempty"`

	//
	// Address of the charge point, consisting of housenumber, street, zipcode, city, country.
	//
	// HERE5
	ChargePointAddress *AddressType `xml:"ns:chargePointAddress,omitempty" json:"chargePointAddress,omitempty"`

	//
	// The type of the charge point "AC" or "DC"
	//

	// HERE3
	ChargePointType string `xml:"ns:chargePointType,omitempty" json:"chargePointType,omitempty"`

	//
	// Type of utilized socket or connector
	//
	// HERE5
	ConnectorType *ConnectorType `xml:"ns:connectorType,omitempty" json:"connectorType,omitempty"`

	//
	// Defines the ratings for the charge point.
	//
	// HERE5
	Ratings *RatingsType `xml:"ns:ratings,omitempty" json:"ratings,omitempty"`

	//
	// Written identification number of the physical energy meter, provided by the manufacturer. For future use.
	//

	// HERE3
	MeterId string `xml:"ns:meterId,omitempty" json:"meterId,omitempty"`

	//
	// One period per item on the bill.
	//
	// HERE5
	ChargingPeriods []*CdrPeriodType `xml:"ns:chargingPeriods,omitempty" json:"chargingPeriods,omitempty"`

	//
	// Total cost for the entire charging process. Should always equal the sum of the individual periodCosts.
	//
	// HERE5
	TotalCost float32 `xml:"ns:totalCost,omitempty" json:"totalCost,omitempty"`

	//
	// Alphabetic. The displayed and charged currency. Defined in ISO 4217 - Table A.1, alphabetic list.
	//

	// HERE3
	Currency string `xml:"ns:currency,omitempty" json:"currency,omitempty"`
}

type ChargePointInfo struct {

	//
	// Globally unique identifier
	//
	// HERE5
	EvseId *EvseId `xml:"ns:evseId,omitempty" json:"evseId,omitempty"`

	//
	// Alphanumeric. Identifies a location/pool of EVSEs. Unique within one EVSE Operator
	//

	// HERE3
	LocationId string `xml:"ns:locationId,omitempty" json:"locationId,omitempty"`

	//
	// Recommended. Date and time of the latest data update for this ChargePointInfo. When set it must be updated if any value is changed.
	//
	// HERE5
	Timestamp *DateTimeType `xml:"ns:timestamp,omitempty" json:"timestamp,omitempty"`

	//
	// Official name; should be unique in the geographical area
	//

	// HERE3
	LocationName string `xml:"ns:locationName,omitempty" json:"locationName,omitempty"`

	//
	// Alpha, three characters. ISO-639-3 language code defining the language of the location name
	//

	// HERE3
	LocationNameLang string `xml:"ns:locationNameLang,omitempty" json:"locationNameLang,omitempty"`

	// HERE5
	Images []*EvseImageUrlType `xml:"ns:images,omitempty" json:"images,omitempty"`

	// HERE5
	RelatedResource []*RelatedResourceType `xml:"ns:relatedResource,omitempty" json:"relatedResource,omitempty"`

	//
	// Address of the charge point, consisting of housenumber, street, zipcode, city, country.
	//
	// HERE5
	ChargePointAddress *AddressType `xml:"ns:chargePointAddress,omitempty" json:"chargePointAddress,omitempty"`

	//
	// Geographical location of the charge point itself (power outlet).
	//
	// HERE5
	ChargePointLocation *GeoPointType `xml:"ns:chargePointLocation,omitempty" json:"chargePointLocation,omitempty"`

	//
	// Geographical location of related points relevant to the user
	//
	// HERE5
	RelatedLocation []*AdditionalGeoPointType `xml:"ns:relatedLocation,omitempty" json:"relatedLocation,omitempty"`

	//
	// One of IANA tzdata's TZ-values representing the time zone of the location. Examples: "Europe/Oslo", "Europe/Zurich". (http://www.iana.org/time-zones)
	//

	// HERE3
	TimeZone string `xml:"ns:timeZone,omitempty" json:"timeZone,omitempty"`

	//
	// The times the EVSE is operating and can be used for charging. Must nor be provided if operating hours are unsure/unknown
	//
	// HERE5
	OpeningTimes *HoursType `xml:"ns:openingTimes,omitempty" json:"openingTimes,omitempty"`

	//
	// The current status of the charge point.
	//
	// HERE5
	Status *ChargePointStatusType `xml:"ns:status,omitempty" json:"status,omitempty"`

	//
	// Planned status changes in the future. If a time span matches with the current or displayed date, the corresponding value overwrites "status"
	//
	// HERE5
	StatusSchedule []*ChargePointScheduleType `xml:"ns:statusSchedule,omitempty" json:"statusSchedule,omitempty"`

	//
	// Numeric. Service hotline for charging station to be displayed to the EV user. Separators recommended. Must include country code (e.g. +49).
	// RegEx:
	//

	// HERE3
	TelephoneNumber string `xml:"ns:telephoneNumber,omitempty" json:"telephoneNumber,omitempty"`

	//
	// The general type of the charge point location.
	//
	// HERE5
	Location *GeneralLocationType `xml:"ns:location,omitempty" json:"location,omitempty"`

	//
	// Information regarding a parking spot that can be used to access the EVSE.
	//
	// HERE5
	ParkingSpot []*ParkingSpotInfo `xml:"ns:parkingSpot,omitempty" json:"parkingSpot,omitempty"`

	//
	// This value, if provided, represents the restriction to EVSE-usage for different purposes.
	//
	// HERE5
	Restriction []*RestrictionType `xml:"ns:restriction,omitempty" json:"restriction,omitempty"`

	// HERE5
	AuthMethods []*AuthMethodType `xml:"ns:authMethods,omitempty" json:"authMethods,omitempty"`

	//
	// Which receptable type is/are present for a power outlet.
	//
	// HERE5
	Connectors []*ConnectorType `xml:"ns:connectors,omitempty" json:"connectors,omitempty"`

	//
	// The type of the charge point "AC" or "DC"
	//

	// HERE3
	ChargePointType string `xml:"ns:chargePointType,omitempty" json:"chargePointType,omitempty"`

	//
	// Defines the ratings for the charge point.
	//
	// HERE5
	Ratings *RatingsType `xml:"ns:ratings,omitempty" json:"ratings,omitempty"`

	//
	// Alpha, three characters. Language(s) of the user interface or printed on-site instructions. ISO-639-3 language code
	//

	// HERE3
	UserInterfaceLang string `xml:"ns:userInterfaceLang,omitempty" json:"userInterfaceLang,omitempty"`

	//
	// If a reservation of this charge point is possible, this is the maximum duration the CPO will allow a reservation for in minutes. Recommended: 30 or 60 minutes.
	//

	// HERE3
	MaxReservation int32 `xml:"ns:maxReservation,omitempty" json:"maxReservation,omitempty"`
}

type TariffInfo struct {

	//
	// Alphanumeric. Identifies a tariff. Unique within one EVSE Operator. Must begin with the Operator-ID, without separators.
	//
	// HERE5
	TariffId *TariffId `xml:"ns:tariffId,omitempty" json:"tariffId,omitempty"`

	//
	// Element describing an individual tariff for a specific recipient. One default tariff without recipients must be provided.
	//
	// HERE5
	IndividualTariff []*IndividualTariffType `xml:"ns:individualTariff,omitempty" json:"individualTariff,omitempty"`
}

type EvseStatusType struct {

	// HERE5
	EvseId *EvseId `xml:"ns:evseId,omitempty" json:"evseId,omitempty"`

	//
	// The major status type reflects the overall status of the EVSE. Values:
	// available: the EVSE is able to start a new charging process;
	// not-available: at the moment no new charging process may be started;
	// unknown: the current status of the EVSE is not known;
	//

	Major string `xml:"http://ochp.eu/1.4 major,attr,omitempty" json:"major,omitempty"`

	//
	// The optional minor status type reflects the detailed status of the EVSE in addition to the major status. For each minor status value a proposed ttl value is given. However, the ttl should only be set to a value other than default if the expected status change is known or can be predicted. Values:
	// available: the EVSE is able to start a new charging process;
	// reserved: the EVSE is able to start a new charging process for limited duration as a future reservation is present. ttl to be set on the start of the reservation;
	// charging: the EVSE is in use. ttl to be set on the expected end of the charging process;
	// blocked: the EVSE not accessible because of a physical barrier, i.e. a car;
	// outoforder: the EVSE is currently out of order. ttl to be set to the expected re-enabling;
	//

	Minor string `xml:"http://ochp.eu/1.4 minor,attr,omitempty" json:"minor,omitempty"`

	//
	// The time to live is set as the deadline until which the status value is to be considered valid.  Should be set to the expected status change.
	//

	Ttl soap.XSDDateTime `xml:"http://ochp.eu/1.4 ttl,attr,omitempty" json:"ttl,omitempty"`
}

type ParkingStatusType struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 parking"`

	// HERE5
	ParkingId *ParkingId `xml:"ns:parkingId,omitempty" json:"parkingId,omitempty"`

	//
	// The status type reflects the overall status of the parking spot. Values:
	// available: the parking spot is empty;
	// not-available: the parking spot is occupied;
	// unknown: the current status of the parking spot is not known;
	//

	Status string `xml:"http://ochp.eu/1.4 status,attr,omitempty" json:"status,omitempty"`

	//
	// The time to live is set as the deadline until which the status value is to be considered valid.  Should be set to the expected status change.
	//

	Ttl soap.XSDDateTime `xml:"http://ochp.eu/1.4 ttl,attr,omitempty" json:"ttl,omitempty"`
}

type AddCDRsRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:AddCDRsRequest"`

	//
	// This contains one or more Charge Detail Records. The status must be set to "new" unless already declined CDRs are being "revised"or "rejected".
	//
	// HERE5
	CdrInfoArray []*CDRInfo `xml:"ns:cdrInfoArray,omitempty" json:"cdrInfoArray,omitempty"`
}

type AddCDRsResponse struct {
	// XXX
	XMLName xml.Name `xml:"AddCDRsResponse"`

	//
	// This contains the result of AddCDRs.req
	//
	// HERE5
	Result *Result `xml:"result,omitempty" json:"result,omitempty"`

	//
	// This contains the refused Charge Detail Records.
	//
	// HERE5
	ImplausibleCdrsArray []*CdrId `xml:"ns:implausibleCdrsArray,omitempty" json:"implausibleCdrsArray,omitempty"`
}

type GetCDRsRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:GetCDRsRequest"`

	//
	// Defines which status of CDRs to return to the EMP.
	// Valid options: accepted, revised, approved, rejected.
	// If not set, returns accepted and revised CDRs.
	//
	// HERE5
	CdrStatus *CdrStatusType `xml:"ns:cdrStatus,omitempty" json:"cdrStatus,omitempty"`
}

type GetCDRsResponse struct {
	// XXX
	XMLName xml.Name `xml:"GetCDRsResponse"`

	//
	// This contains the result of GetCDRs.req
	//
	// HERE5
	Result *Result `xml:"result,omitempty" json:"result,omitempty"`

	//
	// This contains the CDRs with the defined status that have been sent towards the calling provider.
	//
	// HERE5
	CdrInfoArray []*CDRInfo `xml:"ns:cdrInfoArray,omitempty" json:"cdrInfoArray,omitempty"`
}

type CheckCDRsRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:CheckCDRsRequest"`

	//
	// Defines which status of CDRs to return to the CPO making the call.
	// Valid options: declined (default, if not set), approved, rejected.
	//
	// HERE5
	CdrStatus *CdrStatusType `xml:"ns:cdrStatus,omitempty" json:"cdrStatus,omitempty"`
}

type CheckCDRsResponse struct {
	// XXX
	XMLName xml.Name `xml:"CheckCDRsResponse"`

	//
	// This contains the result of CheckCDRs.req
	//
	// HERE5
	Result *Result `xml:"result,omitempty" json:"result,omitempty"`

	//
	// This contains the CDRs with the defined status that have been sent by the calling operator.
	//
	// HERE5
	CdrInfoArray []*CDRInfo `xml:"ns:cdrInfoArray,omitempty" json:"cdrInfoArray,omitempty"`
}

type GetRoamingAuthorisationListRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:GetRoamingAuthorisationListRequest"`
}

type GetRoamingAuthorisationListResponse struct {
	// XXX
	XMLName xml.Name `xml:"GetRoamingAuthorisationListResponse"`

	//
	// This contains the result of GetRoamingAuthorisationList.req
	//
	// HERE5
	Result *Result `xml:"result,omitempty" json:"result,omitempty"`

	//
	// This contains the roaming authorisation records.
	//
	// HERE5
	RoamingAuthorisationInfoArray []*RoamingAuthorisationInfo `xml:"ns:roamingAuthorisationInfoArray,omitempty" json:"roamingAuthorisationInfoArray,omitempty"`
}

type SetRoamingAuthorisationListRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:SetRoamingAuthorisationListRequest"`

	//
	// This contains the roaming authorisation records.
	//
	// HERE5
	RoamingAuthorisationInfoArray []*RoamingAuthorisationInfo `xml:"ns:roamingAuthorisationInfoArray,omitempty" json:"roamingAuthorisationInfoArray,omitempty"`
}

type SetRoamingAuthorisationListResponse struct {
	// XXX
	XMLName xml.Name `xml:"SetRoamingAuthorisationListResponse"`

	//
	// This contains the result of SetRoamingAuthorisationList.req
	//
	// HERE5
	Result *Result `xml:"result,omitempty" json:"result,omitempty"`

	//
	// This contains the roaming authorisation records that could not be set in the clearing house. For error description see the result message.
	//
	// HERE5
	RefusedRoamingAuthorisationInfo []*RoamingAuthorisationInfo `xml:"ns:refusedRoamingAuthorisationInfo,omitempty" json:"refusedRoamingAuthorisationInfo,omitempty"`
}

type GetChargePointListRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:GetChargePointListRequest"`
}

type GetChargePointListResponse struct {
	// XXX
	XMLName xml.Name `xml:"GetChargePointListResponse"`

	//
	// This contains the result of GetRoamingAuthorisationList.req
	//
	// HERE5
	Result *Result `xml:"result,omitempty" json:"result,omitempty"`

	//
	// This contains the charge point information records
	//
	// HERE5
	ChargePointInfoArray []*ChargePointInfo `xml:"ns:chargePointInfoArray,omitempty" json:"chargePointInfoArray,omitempty"`
}

type SetChargePointListRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:SetChargePointListRequest"`

	//
	// This contains the charge point information records
	//
	// HERE5
	ChargePointInfoArray []*ChargePointInfo `xml:"ns:chargePointInfoArray,omitempty" json:"chargePointInfoArray,omitempty"`
}

type SetChargePointListResponse struct {
	// XXX
	XMLName xml.Name `xml:"SetChargePointListResponse"`

	//
	// This contains the result of SetChargePointList.req
	//
	// HERE5
	Result *Result `xml:"result,omitempty" json:"result,omitempty"`

	//
	// This contains the charge point information records that could not be set in the clearing house. For error description see the result message.
	//
	// HERE5
	RefusedChargePointInfo []*ChargePointInfo `xml:"ns:refusedChargePointInfo,omitempty" json:"refusedChargePointInfo,omitempty"`
}

type GetRoamingAuthorisationListUpdatesRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:GetRoamingAuthorisationListUpdatesRequest"`

	//
	// Date and time since the last successful call of GetRoamingAuthorisationList.req or GetRoamingAuthorisationListUpdate.req
	//
	// HERE5
	LastUpdate *DateTimeType `xml:"ns:lastUpdate,omitempty" json:"lastUpdate,omitempty"`
}

type GetRoamingAuthorisationListUpdatesResponse struct {
	// XXX
	XMLName xml.Name `xml:"GetRoamingAuthorisationListUpdatesResponse"`

	//
	// This contains the result of GetRoamingAuthorisationListUpdate.req
	//
	// HERE5
	Result *Result `xml:"result,omitempty" json:"result,omitempty"`

	//
	// This contains the roaming authorisation records changed since the time specified in lastUpdate in the request
	//
	// HERE5
	RoamingAuthorisationInfo []*RoamingAuthorisationInfo `xml:"ns:roamingAuthorisationInfo,omitempty" json:"roamingAuthorisationInfo,omitempty"`
}

type UpdateRoamingAuthorisationListRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:UpdateRoamingAuthorisationListRequest"`

	//
	// This contains the roaming authorisation records to be updated or added
	//
	// HERE5
	RoamingAuthorisationInfoArray []*RoamingAuthorisationInfo `xml:"ns:roamingAuthorisationInfoArray,omitempty" json:"roamingAuthorisationInfoArray,omitempty"`
}

type UpdateRoamingAuthorisationListResponse struct {
	// XXX
	XMLName xml.Name `xml:"UpdateRoamingAuthorisationListResponse"`

	//
	// This contains the result of UpdateRoamingAuthorisationList.req
	//
	// HERE5
	Result *Result `xml:"result,omitempty" json:"result,omitempty"`

	//
	// This contains the roaming authorisation records that could not be set in the clearing house. For error description see the result message.
	//
	// HERE5
	RefusedRoamingAuthorisationInfo []*RoamingAuthorisationInfo `xml:"ns:refusedRoamingAuthorisationInfo,omitempty" json:"refusedRoamingAuthorisationInfo,omitempty"`
}

type ConfirmCDRsRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:ConfirmCDRsRequest"`

	// HERE4

	Approved []struct {

		//
		// This contains the CDR-ID of the CDR to be approved.
		//
		// HERE5
		CdrId *CdrId `xml:"ns:cdrId,omitempty" json:"cdrId,omitempty"`

		//
		// This contains the EVSE-ID belonging to the CDR to be approved.
		//
		// HERE5
		EvseId *EvseId `xml:"ns:evseId,omitempty" json:"evseId,omitempty"`
	} `xml:"ns:approved,omitempty" json:"approved,omitempty"`

	// HERE4

	Declined []struct {

		//
		// This contains the CDR-ID of the CDR to be declined.
		//
		// HERE5
		CdrId *CdrId `xml:"ns:cdrId,omitempty" json:"cdrId,omitempty"`

		//
		// This contains the EVSE-ID belonging to the CDR to be declined.
		//
		// HERE5
		EvseId *EvseId `xml:"ns:evseId,omitempty" json:"evseId,omitempty"`
	} `xml:"ns:declined,omitempty" json:"declined,omitempty"`
}

type ConfirmCDRsResponse struct {
	// XXX
	XMLName xml.Name `xml:"ConfirmCDRsResponse"`

	//
	// This contains the result of ConfirmCDRs.req
	//
	// HERE5
	Result *Result `xml:"result,omitempty" json:"result,omitempty"`
}

type GetChargePointListUpdatesRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:GetChargePointListUpdatesRequest"`

	//
	// Date and time since the last successful call of GetChargePointList.req of GetChargePointListUpdates.req
	//
	// HERE5
	LastUpdate *DateTimeType `xml:"ns:lastUpdate,omitempty" json:"lastUpdate,omitempty"`
}

type GetChargePointListUpdatesResponse struct {
	// XXX
	XMLName xml.Name `xml:"GetChargePointListUpdatesResponse"`

	//
	// this contains the result of GetChargePointListUpdates.req
	//
	// HERE5
	Result *Result `xml:"result,omitempty" json:"result,omitempty"`

	//
	// This contains the charge point information records changed since the time specified in lastUpdate in the request
	//
	// HERE5
	ChargePointInfoArray []*ChargePointInfo `xml:"ns:chargePointInfoArray,omitempty" json:"chargePointInfoArray,omitempty"`
}

type UpdateChargePointListRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:UpdateChargePointListRequest"`

	//
	// This contains the charge point information records to be updated or added
	//
	// HERE5
	ChargePointInfoArray []*ChargePointInfo `xml:"ns:chargePointInfoArray,omitempty" json:"chargePointInfoArray,omitempty"`
}

type UpdateChargePointListResponse struct {
	// XXX
	XMLName xml.Name `xml:"UpdateChargePointListResponse"`

	//
	// This contains the result of UpdateChargePointList.req
	//
	// HERE5
	Result *Result `xml:"result,omitempty" json:"result,omitempty"`

	//
	// This contains the charge point information records that could not be set in the clearing house. For error description see the result message.
	//
	// HERE5
	RefusedChargePointInfo []*ChargePointInfo `xml:"ns:refusedChargePointInfo,omitempty" json:"refusedChargePointInfo,omitempty"`
}

type UpdateTariffsRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:UpdateTariffsRequest"`

	//
	// This contains the tariff information to be updated or added.
	//
	// HERE5
	TariffInfoArray []*TariffInfo `xml:"ns:TariffInfoArray,omitempty" json:"TariffInfoArray,omitempty"`
}

type UpdateTariffsResponse struct {
	// XXX
	XMLName xml.Name `xml:"UpdateTariffsResponse"`

	//
	// This contains the result of UpdateTariffs.req
	//
	// HERE5
	Result *Result `xml:"result,omitempty" json:"result,omitempty"`

	//
	// This contains the charge point information records that could not be set in the clearing house. For error description see the result message.
	//
	// HERE5
	RefusedTariffInfo []*TariffInfo `xml:"ns:refusedTariffInfo,omitempty" json:"refusedTariffInfo,omitempty"`
}

type GetTariffUpdatesRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:GetTariffUpdatesRequest"`

	//
	// Date and time since the last successful call. If left empty, will return full list of valid tariffs.
	//
	// HERE5
	LastUpdate *DateTimeType `xml:"ns:lastUpdate,omitempty" json:"lastUpdate,omitempty"`
}

type GetTariffUpdatesResponse struct {
	// XXX
	XMLName xml.Name `xml:"GetTariffUpdatesResponse"`

	//
	// This contains the result of GetChargePointListUpdates.req
	//
	// HERE5
	Result *Result `xml:"result,omitempty" json:"result,omitempty"`

	//
	// This contains the tariff information changed since the time specified in lastUpdate in the request (or all valid tariffs)
	//
	// HERE5
	TariffInfoArray []*TariffInfo `xml:"ns:TariffInfoArray,omitempty" json:"TariffInfoArray,omitempty"`
}

type GetSingleRoamingAuthorisationRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:GetSingleRoamingAuthorisationRequest"`

	//
	// This contains the ID of the token which is to be retreived from the CHS.
	//
	// HERE5
	EmtId *EmtId `xml:"ns:emtId,omitempty" json:"emtId,omitempty"`
}

type GetSingleRoamingAuthorisationResponse struct {
	// XXX
	XMLName xml.Name `xml:"GetSingleRoamingAuthorisationResponse"`

	//
	// This contains the result of GetSingleRoamingAuthorisation.req
	//
	// HERE5
	Result *Result `xml:"result,omitempty" json:"result,omitempty"`

	//
	// This contains the roaming authorisation record for the requested token, if the request was valid.
	//
	// HERE5
	RoamingAuthorisationInfo *RoamingAuthorisationInfo `xml:"ns:roamingAuthorisationInfo,omitempty" json:"roamingAuthorisationInfo,omitempty"`
}

type UpdateStatusRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:UpdateStatusRequest"`

	//
	// This contains one EVSE id with the current status represented in a major part and a minor part.
	//
	// HERE5
	Evse []*EvseStatusType `xml:"ns:evse,omitempty" json:"evse,omitempty"`

	//
	// This contains one parking-ID with the current corresponding status.
	//
	// HERE5
	Parking []*ParkingStatusType `xml:"ns:parking,omitempty" json:"parking,omitempty"`

	//
	// The time to live is set as the deadline till the status values are to be considered valid, where not otherwise specified.
	//
	// HERE5
	Ttl *DateTimeType `xml:"ns:ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateStatusResponse struct {
	// XXX
	XMLName xml.Name `xml:"UpdateStatusResponse"`

	//
	// This contains the result of UpdateStatus.req
	//
	// HERE5
	Result *Result `xml:"result,omitempty" json:"result,omitempty"`
}

type GetStatusRequest struct {
	// XXX
	XMLName xml.Name `xml:"ns:GetStatusRequest"`

	//
	// If this value is set to a point in the past, the response is limited to status information that is younger than the given value.
	//
	// HERE5
	StartDateTime *DateTimeType `xml:"ns:startDateTime,omitempty" json:"startDateTime,omitempty"`

	//
	// Allows specification of either evse, parking or combined status values to be returned. Not set / default: EVSE.
	//

	// HERE3
	StatusType string `xml:"ns:statusType,omitempty" json:"statusType,omitempty"`
}

type GetStatusResponse struct {
	// XXX
	XMLName xml.Name `xml:"GetStatusResponse"`

	//
	// Status values for all EVSE that have been combined with parking status values according to static POI data.
	//
	// HERE5
	Combined []*EvseStatusType `xml:"ns:combined,omitempty" json:"combined,omitempty"`

	//
	// Status values for all EVSE as sent to the eCHS by the EVSE operator.
	//
	// HERE5
	Evse []*EvseStatusType `xml:"ns:evse,omitempty" json:"evse,omitempty"`

	//
	// Status values for all parking spots as sent to the eCHS by the parking spot operator.
	//
	// HERE5
	Parking []*ParkingStatusType `xml:"ns:parking,omitempty" json:"parking,omitempty"`
}

type Result struct {
	XMLName xml.Name `xml:"http://ochp.eu/1.4 result"`

	//
	// The machine-readable result code.
	//
	// HERE5
	ResultCode *ResultCodeType `xml:"resultCode,omitempty" json:"resultCode,omitempty"`

	//
	// The human-readable error description
	//

	// HERE3
	ResultDescription string `xml:"ns:resultDescription,omitempty" json:"resultDescription,omitempty"`
}

// end: typesTmpl

// start: opsTmpl

type OCHP_1_4 interface {

	/*
		Local roaming charge data records are sent from the CMS to the CHS.
	*/
	AddCDRs(ctx context.Context, request *AddCDRsRequest) (*AddCDRsResponse, error)

	/*
		Cleared roaming charge data records, held at the CHS are sent from the CHS to the MDM. Note that only cleared CDRs that concern the EVSP are sent according to the status specified in the request.
	*/
	GetCDRs(ctx context.Context, request *GetCDRsRequest) (*GetCDRsResponse, error)

	/*
		Cleared roaming charge data records, held at the CHS are sent from the CHS to the CMS. Note that only CDRs sent by this EVSE operator are sent according to the status specified in the request.
	*/
	CheckCDRs(ctx context.Context, request *CheckCDRsRequest) (*CheckCDRsResponse, error)

	/*
		A CMS downloads the global authorisation data repository from the CHS.
	*/
	GetRoamingAuthorisationList(ctx context.Context, request *GetRoamingAuthorisationListRequest) (*GetRoamingAuthorisationListResponse, error)

	/*
		The MDM of each EVSP has to exchange the own authorisation data with the Clearing House to share that data with EVSE Operators.
	*/
	SetRoamingAuthorisationList(ctx context.Context, request *SetRoamingAuthorisationListRequest) (*SetRoamingAuthorisationListResponse, error)

	/*
		A NPS downloads the global charge point information from the CHS.
	*/
	GetChargePointList(ctx context.Context, request *GetChargePointListRequest) (*GetChargePointListResponse, error)

	/*
		Local roaming charge data records are sent from the CMS to the CHS.
	*/
	SetChargepointList(ctx context.Context, request *SetChargePointListRequest) (*SetChargePointListResponse, error)

	/*
		A CMS downloads the changes to the global authorisation data repository since the last synchronization from the CHS.
	*/
	GetRoamingAuthorisationListUpdates(ctx context.Context, request *GetRoamingAuthorisationListUpdatesRequest) (*GetRoamingAuthorisationListUpdatesResponse, error)

	/*
		For later updates of authorization data from the MDM to the Clearing House and the EVSE Operators, only the changed entries (delta) have to be transferred.
	*/
	UpdateRoamingAuthorisationList(ctx context.Context, request *UpdateRoamingAuthorisationListRequest) (*UpdateRoamingAuthorisationListResponse, error)

	/*
		Cleared roaming charge data records, downloaded from the CHS are confirmed by the MDM. An EVSE-Operator has to confirm every downloaded CDR either with an accept or a revoke.
	*/
	ConfirmCDRs(ctx context.Context, request *ConfirmCDRsRequest) (*ConfirmCDRsResponse, error)

	/*
		A NPS downloads the changes to the global charge point information data repository since the last synchronization from the CHS.
	*/
	GetChargePointListUpdates(ctx context.Context, request *GetChargePointListUpdatesRequest) (*GetChargePointListUpdatesResponse, error)

	/*
		For later updates of charge point information from the CIMS to the Clearing House and the EVSPs, only the changed entries (delta) have to be transferred.
	*/
	UpdateChargePointList(ctx context.Context, request *UpdateChargePointListRequest) (*UpdateChargePointListResponse, error)

	/*
		For all updates to tariff objects from the CIMS to the Clearing House and the EVSPs. Can contain single or multiple tariffs to update.
	*/
	UpdateTariffs(ctx context.Context, request *UpdateTariffsRequest) (*UpdateTariffsResponse, error)

	/*
		Downloads all tariff objects from the Clearing House that have been updated since a given date and time. Can contain single or multiple tariffs.
	*/
	GetTariffUpdates(ctx context.Context, request *GetTariffUpdatesRequest) (*GetTariffUpdatesResponse, error)

	/*
		A CMS may request the Clearing House to authorize one single token for a charging session
	*/
	GetSingleRoamingAuthorisation(ctx context.Context, request *GetSingleRoamingAuthorisationRequest) (*GetSingleRoamingAuthorisationResponse, error)
}

type oCHP_1_4 struct {
	client *soap.Client
}

func NewOCHP_1_4(client *soap.Client) OCHP_1_4 {
	return &oCHP_1_4{
		client: client,
	}
}

func (service *oCHP_1_4) AddCDRs(ctx context.Context, request *AddCDRsRequest) (*AddCDRsResponse, error) {
	response := new(AddCDRsResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/AddCDRs", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *oCHP_1_4) GetCDRs(ctx context.Context, request *GetCDRsRequest) (*GetCDRsResponse, error) {
	response := new(GetCDRsResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/GetCDRs", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *oCHP_1_4) CheckCDRs(ctx context.Context, request *CheckCDRsRequest) (*CheckCDRsResponse, error) {
	response := new(CheckCDRsResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/CheckCDRs", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *oCHP_1_4) GetRoamingAuthorisationList(ctx context.Context, request *GetRoamingAuthorisationListRequest) (*GetRoamingAuthorisationListResponse, error) {
	response := new(GetRoamingAuthorisationListResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/GetRoamingAuthorisationList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *oCHP_1_4) SetRoamingAuthorisationList(ctx context.Context, request *SetRoamingAuthorisationListRequest) (*SetRoamingAuthorisationListResponse, error) {
	response := new(SetRoamingAuthorisationListResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/SetRoamingAuthorisationList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *oCHP_1_4) GetChargePointList(ctx context.Context, request *GetChargePointListRequest) (*GetChargePointListResponse, error) {
	response := new(GetChargePointListResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/GetChargePointList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *oCHP_1_4) SetChargepointList(ctx context.Context, request *SetChargePointListRequest) (*SetChargePointListResponse, error) {
	response := new(SetChargePointListResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/SetChargepointList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *oCHP_1_4) GetRoamingAuthorisationListUpdates(ctx context.Context, request *GetRoamingAuthorisationListUpdatesRequest) (*GetRoamingAuthorisationListUpdatesResponse, error) {
	response := new(GetRoamingAuthorisationListUpdatesResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/GetRoamingAuthorisationListUpdates", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *oCHP_1_4) UpdateRoamingAuthorisationList(ctx context.Context, request *UpdateRoamingAuthorisationListRequest) (*UpdateRoamingAuthorisationListResponse, error) {
	response := new(UpdateRoamingAuthorisationListResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/UpdateRoamingAuthorisationList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *oCHP_1_4) ConfirmCDRs(ctx context.Context, request *ConfirmCDRsRequest) (*ConfirmCDRsResponse, error) {
	response := new(ConfirmCDRsResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/ConfirmCDRs", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *oCHP_1_4) GetChargePointListUpdates(ctx context.Context, request *GetChargePointListUpdatesRequest) (*GetChargePointListUpdatesResponse, error) {
	response := new(GetChargePointListUpdatesResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/GetChargePointListUpdates", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *oCHP_1_4) UpdateChargePointList(ctx context.Context, request *UpdateChargePointListRequest) (*UpdateChargePointListResponse, error) {
	response := new(UpdateChargePointListResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/UpdateChargePointList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *oCHP_1_4) UpdateTariffs(ctx context.Context, request *UpdateTariffsRequest) (*UpdateTariffsResponse, error) {
	response := new(UpdateTariffsResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/UpdateTariffs", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *oCHP_1_4) GetTariffUpdates(ctx context.Context, request *GetTariffUpdatesRequest) (*GetTariffUpdatesResponse, error) {
	response := new(GetTariffUpdatesResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/GetTariffUpdates", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *oCHP_1_4) GetSingleRoamingAuthorisation(ctx context.Context, request *GetSingleRoamingAuthorisationRequest) (*GetSingleRoamingAuthorisationResponse, error) {
	response := new(GetSingleRoamingAuthorisationResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/GetSingleRoamingAuthorisation", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

type OCHP_1_4_live interface {

	/*
		A CMS may update the current live status of individual charging stations in the Clearing House to allow roaming partners to receive those statuses.
	*/
	UpdateStatus(ctx context.Context, request *UpdateStatusRequest) (*UpdateStatusResponse, error)

	/*
		A NPS may receive the current live status of individual charging stations from the Clearing House.
	*/
	GetStatus(ctx context.Context, request *GetStatusRequest) (*GetStatusResponse, error)
}

type oCHP_1_4_live struct {
	client *soap.Client
}

func NewOCHP_1_4_live(client *soap.Client) OCHP_1_4_live {
	return &oCHP_1_4_live{
		client: client,
	}
}

func (service *oCHP_1_4_live) UpdateStatus(ctx context.Context, request *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	response := new(UpdateStatusResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/UpdateStatus", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *oCHP_1_4_live) GetStatus(ctx context.Context, request *GetStatusRequest) (*GetStatusResponse, error) {
	response := new(GetStatusResponse)
	err := service.client.CallContext(ctx, "http://ochp.eu/1.4/GetStatus", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// end: opsTmpl
